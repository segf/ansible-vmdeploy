---

- name: Download latest metadata version
  get_url:
    url: "{{ url_base + '/' + file_version }}"
    dest: "{{ workdir + '/' + dist_name + '-cirros_version' }}"
    force: yes
  run_once: True

- name: Download remote checksum (md5) file
  get_url:
    url: "{{ url_base + '/' + dist_release + '/' + item }}"
    dest: "{{ workdir + '/' + dist_name + '-' + item }}"
    force: yes
  with_items:
    - '{{ checksum_file }}'
  run_once: True

- name: Lookup remote checksum (md5)
  shell: >
    grep -E "{{ file_base }}$" "{{ workdir + '/' + dist_name + '-' + checksum_file }}" | awk '{ print $1 }';
  register: remote_checksum
  failed_when: remote_checksum.stdout == ""
  changed_when: False
  run_once: True

- name: Compute checksum (md5) from local image
  stat:
    path: "{{ disk_path + '/' + file_base }}"
    get_checksum: False
    get_md5: True
  register: local_img
  run_once: True

- name: Set new_update fact if image not found
  set_fact:
    new_update: True
  when: local_img.stat.exists == False
  run_once: True

- name: Check if an updated image is required
  set_fact:
    new_update: "{{ (local_img.stat.md5 != remote_checksum.stdout) | bool }}"
  when: local_img.stat.exists == True
  run_once: True

- name: Download cloud image (please wait)
  get_url:
    url: "{{ url_base + '/' + dist_release + '/' + file_base }}"
    dest: "{{ disk_path + '/' + file_base }}"
    checksum: md5:{{ remote_checksum.stdout }}
    force: "{{ new_update }}"
  run_once: True

- name: Load kernel and initrd facts
  setup:
    fact_path: "{{ fact_path }}"
  run_once: True

- name: Set new_update when kernel_boot fact does not exist
  set_fact:
    new_update: True
  when: (ansible_local is undefined) or (ansible_local[distrib] is undefined)
  run_once: True

- name: Set new_update when initrd_boot fact does not exist
  set_fact:
    new_update: True
  when: (ansible_local is undefined) or (ansible_local[distrib] is undefined)
  run_once: True

- name: Check if kernel exists on the filesystem
  stat:
    path: "{{ disk_path + '/' + kernel_base }}"
  register: kernel_file
  when: kernel_base is defined
  run_once: True

- name: Set new_update if kernel image not found
  set_fact:
    new_update: True
  when: kernel_base is defined and kernel_file.stat.exists == False
  run_once: True

- name: Check if initrd exists on the filesystem
  stat:
    path: "{{ disk_path + '/' + initrd_base }}"
  register: initrd_file
  when: initrd_base is defined
  run_once: True

- name: Set new_update if initrd image not found
  set_fact:
    new_update: True
  when: initrd_base is defined and initrd_file.stat.exists == False
  run_once: True

- name: Lookup kernel and initrd files from image
  shell: >
    guestfish --ro -a "{{ disk_path + '/' + file_base }}" -i readlinklist / 'vmlinuz initrd.img' | sort | awk '{ print "/" $0 }'
  register: result
  when: new_update == True
  failed_when: result.stdout == ""
  run_once: True

- name: Register kernel and initrd files vars
  set_fact:
    kernel_boot: "{{ result.stdout_lines[1] }}"
    initrd_boot: "{{ result.stdout_lines[0] }}"
  when: new_update == True
  run_once: True

- name: Register path for kernel and initrd files
  set_fact:
    kernel_path: "{{ kernel_boot | dirname }}"
    initrd_path: "{{ initrd_boot | dirname }}"
    kernel_base: "{{ kernel_boot | basename }}"
    initrd_base: "{{ initrd_boot | basename }}"
  when: new_update == True
  run_once: True

- name: Extract kernel and initrd files from image
  shell: >
    guestfish --ro -i copy-out -a "{{ disk_path + '/' + file_base }}" "{{ kernel_boot }}" "{{ initrd_boot }}" "{{ disk_path }}"
  when: new_update == True
  run_once: True

- name: Set perms on kernel and initrd files
  file:
    path: "{{ disk_path + '/' + item }}"
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items:
    - "{{ kernel_base|d() }}"
    - "{{ initrd_base|d() }}"
  when: new_update == True
  run_once: True

- name: Save kernel and initrd facts
  template:
    src: 'distrib.fact.j2'
    dest: "{{ fact_path + '/' + distrib }}.fact"
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: new_update == True
  run_once: True
