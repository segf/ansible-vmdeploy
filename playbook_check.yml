---

- hosts: all
  gather_facts: yes

  tasks:

  - name: Convert distrib to lower case
    set_fact:
      distrib: "{{ distrib|lower }}"

  - name: Set dist_name and dist_release for ubuntu family
    set_fact:
      dist_name: "{{ distrib[:6] }}"
      dist_release: "{{ distrib[6:] }}"
    when: "'ubuntu' in distrib"

# python3 produces an error
  - name: Select python2 as interpreter for older distribution"
    set_fact:
      ansible_python_interpreter: /usr/bin/python
    when: "distrib in ['ubuntu14', 'centos7']"

  - name: Set dist_name and dist_release for centos family
    set_fact:
      dist_name: "{{ distrib[:6] }}"
      dist_release: "{{ distrib[6] }}"
    when: "'centos' in distrib"

  - name: Set dist_name and dist_release for debian family
    set_fact:
      dist_name: "{{ distrib[:6] }}"
      dist_release: "{{ distrib[6:] }}"
    when: "'debian' in distrib"

  - name: Adjust namesearch_list for centos
    set_fact:
      namesearch_list: "{{ namesearch_list + [ namedomain ] }}"
    when: "'centos' in distrib"

  - name: Fail if distrib matches cirros
    fail:
      msg: "cirros does not support ansible"
    when: "'cirros' in distrib"
 
  - name: Set hypervisor to localhost when undefined
    set_fact:
      hypervisor: "localhost"
    when: (hypervisor is not defined) or (hypervisor == '')

  - name: Set default libvirt uri
    set_fact:
      libvirt_uri: "qemu:///system"

  - name: Set libvirt uri
    set_fact:
      libvirt_uri: "qemu+ssh://{{ hypervisor_user }}@{{ hypervisor }}/system"
    when:
      - "hypervisor not in [ '127.0.0.1', 'localhost', inventory_hostname ]"

  - name: Set network parameters
    set_fact:
      inv_ip: "{{ ip | ipv4('address') }}"
      inv_network: "{{ ip | ipv4('network') }}"
      inv_netmask: "{{ ip | ipv4('netmask') }}"
      inv_gw: "{{ gw | ipv4('address') }}"
      inv_nic: "{{ nic|d()|int + 2 }}"

  - name: Load ansible local facts
    connection: local
    setup:
      filter: ansible_local
      fact_path: "{{ fact_path }}"

  - name: Set disk_vsize fact from local facts
    set_fact:
      disk_vsize: "{{ ansible_local[distrib].disk_vsize }}"

# Distrib
  - name: Checking distribution
    assert:
      that:
        - "ansible_distribution|lower == dist_name"
        - "ansible_distribution_major_version == dist_release"

# Network
  - name: Checking network
    assert:
      that:
        - "ansible_default_ipv4.interface == 'eth0'"
        - "ansible_default_ipv4.address == inv_ip"
        - "ansible_default_ipv4.netmask == inv_netmask"
        - "ansible_default_ipv4.network == inv_network"
        - "ansible_default_ipv4.gateway == inv_gw"
        - "ansible_all_ipv4_addresses|count == 1"
        - "ansible_interfaces|count == inv_nic|int"

# VM
  - name: Checking domain cpu info
    connection: local
    shell: >
      virsh --connect {{ libvirt_uri }} dominfo {{ inventory_hostname }} | grep '^CPU(s):' | awk '{ print $2 }'
    register: result
    failed_when: result.stdout|int != cpu
    changed_when: False

  - name: Checking domain memory info
    connection: local
    shell: >
      virsh --connect {{ libvirt_uri }} dominfo {{ inventory_hostname }} | grep '^Max memory:' | awk '{ print $3 }'
    register: result
    failed_when: result.stdout|int != (ram * 1024)
    changed_when: False

  - name: Convert disk to int when disk is a string
    set_fact:
      disk_root: "{{ disk|first|int * 1024|pow(3)|int }}"
      disk_cnt: "{{ disk | count }}"
    when: not disk is number

  - name: Convert disk to int when disk is a number
    set_fact:
      disk_root: "{{ disk|int * 1024|pow(3)|int }}"
      disk_cnt: 1
    when: disk is number

  - name: Set disk_root to min value if required
    set_fact:
      disk_root: "{{ disk_root if disk_root|int > disk_vsize|int else disk_vsize }}"

  - name: List disk devices by name
    connection: local
    shell: >
      virsh --connect {{ libvirt_uri }} domblklist {{ inventory_hostname }} | sed '1,2 d' | sed '$ d' | awk '{ print $1 }'
    register: device_list
    changed_when: False

  - name: Checking the number of disk device
    assert:
      that:
        - device_list.stdout_lines|count == disk_cnt|int

  - name: Checking domain root disk info
    connection: local
    shell: >
      virsh --connect {{ libvirt_uri }} domblkinfo {{ inventory_hostname }} {{ device_list.stdout_lines[0] }} | grep '^Capacity:' | awk '{ print $2 }'
    register: result
    failed_when: result.stdout|int != disk_root|int
    changed_when: False

  - name: Checking domain additional disks info
    connection: local
    shell: >
      virsh --connect {{ libvirt_uri }} domblkinfo {{ inventory_hostname }} {{ item }} | grep '^Capacity:' | awk '{ print $2 }'
    register: result
    loop: "{{ device_list.stdout_lines[1:] }}"
    loop_control:
      index_var: idx
    failed_when: result.stdout|int != ( disk[idx+1]|int * 1024|pow(3)|int)
    when: disk_cnt > 1
    changed_when: False

# DNS
# Use the real path instead of the link which might be wrong at boot
  - name: Set fact resolvconf_path
    set_fact:
      resolvconf_path: "{{ '/run/systemd/resolve/resolv.conf' if (dist_name == 'ubuntu' and dist_release >= '18') else '/etc/resolv.conf' }}"

  - name: Checking nameserver list
    shell: >
      echo "$(grep '^nameserver' {{ resolvconf_path }} | awk '{ print $2 }' | tr '\n' ' ' | sed 's/ $//' | sort)";
    register: dns_list
    failed_when: dns_list.stdout != nameserver_list|sort|join(' ')
    changed_when: False

  - name: Checking namesearch list
    shell: >
      echo "$(grep '^search' {{ resolvconf_path }} | cut -d' ' -f2- | sed 's/ $//g' | sort)";
    register: dns_search_list
    failed_when: dns_search_list.stdout !=  namesearch_list|sort|join(' ')
    changed_when: False

# User
  - name: Checking user
    getent:
      database: passwd
      key: nadmin
    failed_when: getent_passwd['nadmin'] != [ 'x', '1000', '1000', 'Noob Admin', '/home/nadmin', '/bin/bash' ]
    changed_when: False

  - name: Checking group
    getent:
      database: group
      key: nadmin
    failed_when: getent_group['nadmin'] != [ 'x', '1000', '' ]
    changed_when: False

  - name: Checking user's ssh key
    shell: >
       grep -Fxq "{{ ssh_auth_key }}" '/home/nadmin/.ssh/authorized_keys';
    register: user_key
    failed_when: user_key.rc != 0
    changed_when: False

# System
  - name: Checking hostname
    command: hostname
    register: result
    failed_when: result.stdout != inventory_hostname
    changed_when: False

  - debug:
      var: hostvars[inventory_hostname]
    when: debug is defined
